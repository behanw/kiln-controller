---
general: # General options
  simulate: True

  location:
    topdir: # Defaults to location of config file
    restartdir: # Defaults to topdir

  # Time and Temperature parameters
  unit:
    temp: C # C = Celsius | F = Fahrenheit - Was temp_scale
    time: m # s = Seconds | m = Minutes | h = Hours - Was time_scale_profile
    rate: h # s = Seconds | m = Minutes | h = Hours - Was time_scale_slope

  # This is used to calculate a cost estimate before a run. It's also used
  # to produce the actual cost during a run.
  cost: # Cost Information
    currency_type: $   # Currency Symbol to show when calculating cost to run job
    kwh_rate: 0.1097   # Cost per kilowatt hour per currency_type to calculate cost to run job

  # Automatic restarts - if you have a power brown-out and the raspberry pi
  # reboots, this restarts your kiln where it left off in the firing profile.
  # This only happens if power comes back before window is exceeded.
  restart:
    enable: True # Was automatic_restarts
    window: 15m # since outage. Was automatic_restart_window
    save_state: 1m

  logging:
    level: INFO
    format: "%(asctime)s %(levelname)s %(name)s: %(message)s"
    throttle: 60 # Limit to once every
    verbose:
      - plugins
      #- ambient_temp
      #- caution
      #- current
      #- estop
      #- relay
      #- heartbeat
      #- statustest
      #- thermocouple
      #- web

server:
  incoming_ip: 0.0.0.0
  listening_port: 8081

  use_tls: False
  hostname: fqdn.hostname.net
  https_certfile: ssl.crt
  https_keyfile: ssl.key

  location:
    templates: kilnapp/templates # Relative to topdir
    public: kilnapp/public # Relative to topdir
    profiles: kilnapp/storage/profiles # Relative to topdir

oven:
  type: kiln
  element:
    upper:
      watts: 2800
    lower:
      watts: 2800

  # emergency shutoff the profile if this temp is reached or exceeded.
  # This just shuts off the profile. If your SSR is working, your kiln will
  # naturally cool off. If your SSR has failed/shorted/closed circuit, this
  # means your kiln receives full power until your house burns down.
  # this should not replace you watching your kiln or use of a kiln-sitter
  #emergency_shutoff_temp: 2264 # cone 7 in F
  emergency_shutoff_temp: 1238C # cone 7 in C

  # duty cycle of the entire system in seconds
  #
  # Every N seconds a decision is made about switching the relay[s]
  # on & off and for how long.
  #sensor_time_wait: 2 # Seconds
  duty_cycle: 2s

  # If your kiln is above the starting temperature of the schedule when you
  # click the Start button... skip ahead and begin at the first point in
  # the schedule matching the current kiln temperature.
  seek_start: True

  # These parameters control kiln temperature change. These settings work
  # well with the simulated oven. You must tune them to work well with
  # your specific kiln. Note that the integral pid_ki is
  # inverted so that a smaller number means more integral action.
  pid:
    kp: 10   # Proportional 25,200,200
    ki: 80   # Integral
    kd: 220.83497910261562 # Derivative

  # This setting is required.
  # This setting defines the window within which PID control occurs.
  # Outside this window (N degrees below or above the current target)
  # the elements are either 100% on because the kiln is too cold
  # or 100% off because the kiln is too hot. No integral builds up
  # outside the window. The bigger you make the window, the more
  # integral you will accumulate. This should be a positive integer.
  pid_control_window: 5C # Degrees

  # If the current temperature is outside the pid control window,
  # delay the schedule until it goes back inside. This allows for heating
  # and cooling as fast as possible and not continuing until temp is reached.
  must_catch_up: True

  # low temperature throttling of elements
  # kiln elements have lots of power and tend to drastically overshoot
  # at low temperatures. When under the set point and outside the PID
  # control window and below throttle_below_temp, only throttle_percent
  # of the elements are used max.
  # To prevent throttling, set throttle_percent to 100.
  throttle_below_temp: 150C
  throttle_percent: 50%

  # Simulation parameters
  simulation:
    t_env: 20C       # Degrees
    c_heat: 500.0    # J/K  heat capacity of heat element
    c_oven: 5000.0   # J/K  heat capacity of oven
    p_heat: 5450.0   # W    heating power of oven
    R_o_nocool: 0.5  # K/W  thermal resistance oven -> environment
    R_o_cool: 0.05   # K/W  " with cooling
    R_ho_noair: 0.1  # K/W  thermal resistance heat element -> oven
    R_ho_air: 0.05   # K/W  " with internal air circulation

    # if you want simulations to happen faster than real time, this can be
    # set as high as 1000 to speed simulations up by 1000 times.
    speedup_factor: 100

plugins:
  ambient_temp:
    hw:
      w1:
        gpio: board.D4 # 1-wire bus for chassis temp
    #ambient_temp_verbose = True
    sensors:
      w1:
        28-000000854676:
          name: ctrl_temp
          offset: -5.75C
        28-412dd4467542:
          name: sitter_temp
          offset: -0.35C
        28-35e0d446d751:
          name: sitter_temp
          offset: -0.35C
  caution:
    led:
      gpio: 
        pin: board.D27 # GPIO pin that controls the LED
        inverted: True # Inverted logic if a 1 is off
  control:
    # If your kiln is above the starting temperature of the schedule when you
    # click the Start button... skip ahead and begin at the first point in
    # the schedule matching the current kiln temperature.
    seek_start: True

    # This setting defines the window within which PID control occurs.
    # Outside this window (N degrees below or above the current target)
    # the elements are either 100% on because the kiln is too cold
    # or 100% off because the kiln is too hot. No integral builds up
    # outside the window. The bigger you make the window, the more
    # integral you will accumulate. This should be a positive integer.
    pid_control_window: 5C # Degrees

    # If the current temperature is outside the pid control window,
    # delay the schedule until it goes back inside. This allows for heating
    # and cooling as fast as possible and not continuing until temp is reached.
    must_catch_up: True

    # low temperature throttling of elements
    # kiln elements have lots of power and tend to drastically overshoot
    # at low temperatures. When under the set point and outside the PID
    # control window and below throttle_below_temp, only throttle_percent
    # of the elements are used max.
    # To prevent throttling, set throttle_percent to 100.
    throttle_below_temp: 150C
    throttle_percent: 50%

    pid:
      main:
        # These parameters control kiln temperature change. These settings work
        # well with the simulated oven. You must tune them to work well with
        # your specific kiln. Note that the integral pid_ki is
        # inverted so that a smaller number means more integral action.
        parameters:
          kp: 10   # Proportional 25,200,200
          ki: 80   # Integral
          kd: 220.83497910261562 # Derivative
        thermocouple:
          - main
          - alternate
        relay:
          - main
          - alternate

  current: # Uses ADS1115
    period: 2s # Seconds over which to read a value
    samples: 256 # Samples per period
    maxamps: 30 # Amps
    hw:
      adc:
        alert-gpio: board.D25 # ALRT pin
        bits: 16
        pga_gain: 1 # 0-5
        rate: 860 # Samples per second
        vcc: 5 # Volts DC
      sensors:
        upper_amps:
          element: upper
          channel: [ 0, 1 ]
          inputamps: 100 # Amps
          outputamps: 0.050 # Amps
          burden_res: 150 # Ohms
        lower_amps:
          element: lower
          channel: [ 2, 3 ]
          inputamps: 100 # Amps
          outputamps: 0.050 # Amps
          burden_res: 150 # Ohms
  estop:
    switch:
      gpio: 
        pin: board.D24 # GPIO pin that reads estop state
        inverted: False # Inverted logic if a 1 is off
  relay: # Output to control the relay
    device:
      main:
        type: heater
        gpio: 
          pin: board.D23  # GPIO pin that controls the relay
          inverted: False # Inverted logic if a 1 is off
        percentage: 100%  # How much of the time is applied to this relay
        element:
          - upper
          - lower
      alternate:
        type: heater
        gpio: simulated # For testing the idea of more than one SSR
        percentage: 50% # How much of the time is applied to this relay
        element:
          - upper
  heartbeat:
    period: 2s
    led:
      gpio: 
        pin: board.D22 # GPIO pin that reads estop state
        inverted: True # Inverted logic if a 1 is off
  test_status:
  thermocouple: # Thermocouple breakout boards
    hw:
      #spi: { sclk: board.D17, miso: board.D27 mosi: board.D10 }
      device:
        main: { chip: max31855, chipselect: board.D5, type: K, offset: 0 }
        #lower: { chip: max31856, chipselect: board.D22, type: K, offset: 0 }

    # number of samples of temperature to take over each duty cycle.
    # The larger the number, the more load on the board. K type
    # thermocouples have a precision of about 1/2 degree C.
    # The median of these samples is used for the temperature.
    temperature_average_samples: 10

    # Number of samples over which to calculate heating rate
    heat_rate_samples: 60

    mitigations: 
      ac_freq_hz: 60

      minimum_confidence: 50%
      error_limit: 30

      # There are all kinds of emergencies that can happen including:
      # - temperature is too high (emergency_shutoff_temp exceeded)
      # - lost connection to thermocouple
      # - unknown error with thermocouple
      # - too many errors in a short period from thermocouple
      # but in some cases, you might want to ignore a specific error, log it,
      # and continue running your profile instead of having the process die.
      #
      # You should only set these to True if you experience a problem
      # and WANT to ignore it to complete a firing.
      ignore_errors:
        #- ignore_temp_too_high
        #- ignore_tc_cold_junction_range_error
        #- ignore_tc_cold_junction_temp_high
        #- ignore_tc_cold_junction_temp_low
        #- ignore_tc_faulty_reading
        #- ignore_tc_lost_connection
        #- ignore_tc_range_error
        - ignore_tc_short_errors
        #- ignore_tc_temp_high
        #- ignore_tc_temp_low
        - ignore_tc_unknown_error
        #- ignore_tc_voltage_error

        # This overrides all possible thermocouple errors and prevents the
        # process from exiting.
        #- ignore_tc_too_many_errors
